{"version":3,"sources":["App.tsx","Pages/HomePage.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","components/People/People.tsx","Pages/PeoplePage.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","App","className","role","to","HomePage","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","sex","slug","name","PeopleTable","people","personSlug","useParams","map","born","died","fatherName","motherName","findMother","find","per","findFather","People","useState","setPeople","isLoading","setIsLoading","isShownPeople","setIsShownPeople","shownError","setShownError","useEffect","data","length","catch","error","finally","PeoplePage","createRoot","document","getElementById","render","path","element","index"],"mappings":"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","file":"static/js/main.5fdafd7c.chunk.js","sourcesContent":["import { NavLink, Outlet } from 'react-router-dom';\nimport cn from 'classnames';\n\nimport './App.scss';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return cn('navbar-item', { 'has-background-grey-lighter': isActive });\n};\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      className={cn({ 'has-text-danger': person.sex === 'f' })}\n      to={`/people/${person.slug}`}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Link, useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { personSlug } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            name,\n            sex,\n            born,\n            died,\n            fatherName,\n            motherName,\n            slug,\n          } = person;\n          const findMother = people.find(per => per.name === motherName);\n          const findFather = people.find(per => per.name === fatherName);\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={slug}\n              className={cn({ 'has-background-warning': slug === personSlug })}\n            >\n              <td>\n                <Link\n                  to={`/people/${slug}`}\n                  className={cn({ 'has-text-danger': sex === 'f' })}\n                >\n                  {name}\n                </Link>\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              <td>\n                {findMother ? (\n                  <PersonLink person={findMother} />\n                ) : (\n                  motherName\n                )}\n\n                {!motherName && '-'}\n              </td>\n\n              <td>\n                {findFather ? (\n                  <PersonLink person={findFather} />\n                ) : (\n                  fatherName\n                )}\n\n                {!fatherName && '-'}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { PeopleTable } from '../PeopleTable';\n\nexport const People = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isShownPeople, setIsShownPeople] = useState(false);\n  const [shownError, setShownError] = useState('');\n\n  useEffect(() => {\n    getPeople()\n      .then((data) => {\n        setPeople(data);\n        setIsShownPeople(true);\n        if (!data.length) {\n          setShownError('There are no people on the server');\n        }\n      })\n      .catch((error) => {\n        setShownError('Something went wrong');\n        throw error;\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        {isLoading && <Loader />}\n\n        {shownError === 'Something went wrong' && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            {shownError}\n          </p>\n        )}\n\n        {shownError === 'There are no people on the server' && (\n          <p data-cy=\"noPeopleMessage\">\n            {shownError}\n          </p>\n        )}\n\n        {isShownPeople && <PeopleTable people={people} />}\n      </div>\n    </div>\n  );\n};\n","import { People } from '../components/People/People';\n\nexport const PeoplePage = () => {\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <People />\n    </>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  Route, HashRouter, Routes, Navigate,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage } from './Pages/HomePage';\nimport { PeoplePage } from './Pages/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n          <Route index element={<HomePage />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":personSlug?\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </HashRouter>,\n  );\n"],"sourceRoot":""}